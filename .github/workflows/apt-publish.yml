name: AASDK APT Repository Upload

on:
  workflow_dispatch:
    inputs:
      build_run_id:
        description: 'Build run ID to publish to APT repo'
        required: true
        type: string
      distributions:
        description: 'Distributions to publish to (comma separated: bookworm,trixie)'
        required: false
        default: 'bookworm,trixie'
        type: string
      
  workflow_call:
    inputs:
      build_run_id:
        description: 'Build run ID to publish to APT repo'
        required: true
        type: string
      distributions:
        description: 'Distributions to publish to (comma separated: bookworm,trixie)'
        required: false
        default: 'bookworm,trixie'
        type: string

jobs:
  upload-to-apt-repo:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Parse distributions
      id: parse_distros
      run: |
        DISTROS="${{ inputs.distributions }}"
        echo "distributions=${DISTROS}" >> $GITHUB_OUTPUT
        echo "Publishing to distributions: ${DISTROS}"

    - name: Download artifacts from build run
      run: |
        echo "Downloading artifacts from run ID: ${{ inputs.build_run_id }}"
        
        # Create directory for apt packages
        mkdir -p ./apt-packages
        
        # Download all artifacts from the specified run
        gh run download ${{ inputs.build_run_id }} --dir ./downloaded-artifacts
        
        # Move build artifacts to apt packages directory
        if [ -d "./downloaded-artifacts" ]; then
          find ./downloaded-artifacts -name "*.deb" -exec cp {} ./apt-packages/ \;
        fi
        
        echo "Downloaded .deb packages:"
        ls -la ./apt-packages/
        
        # Verify we have packages
        if [ ! "$(ls -A ./apt-packages/*.deb 2>/dev/null)" ]; then
          echo "Error: No .deb packages found in build run ${{ inputs.build_run_id }}"
          exit 1
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare packages for APT repository
      run: |
        echo "Preparing packages for APT repository upload..."
        
        # Parse distributions
        IFS=',' read -ra DIST_ARRAY <<< "${{ steps.parse_distros.outputs.distributions }}"
        
        # Create distribution directories
        for dist in "${DIST_ARRAY[@]}"; do
          dist=$(echo "$dist" | xargs) # trim whitespace
          echo "Creating directory for distribution: $dist"
          mkdir -p "./apt-repo-upload/$dist"
        done
        
        # Copy packages to appropriate distributions
        for dist in "${DIST_ARRAY[@]}"; do
          dist=$(echo "$dist" | xargs) # trim whitespace
          if [ -d ./apt-packages ] && [ "$(ls -A ./apt-packages/*.deb 2>/dev/null)" ]; then
            cp ./apt-packages/*.deb "./apt-repo-upload/$dist/"
            echo "Copied $(ls ./apt-packages/*.deb | wc -l) packages to $dist distribution"
          fi
        done
        
        echo "APT repository package structure:"
        find ./apt-repo-upload -type f -name "*.deb" | sort

    - name: List packages for Bookworm
      if: contains(inputs.distributions, 'bookworm')
      id: bookworm_packages
      run: |
        echo "Finding .deb packages for Bookworm..."
        packages=""
        for deb_file in ./apt-repo-upload/bookworm/*.deb; do
          if [ -f "$deb_file" ]; then
            if [ -n "$packages" ]; then
              packages="$packages,"
            fi
            packages="$packages$(basename $deb_file)"
          fi
        done
        echo "packages=$packages" >> $GITHUB_OUTPUT
        echo "Bookworm packages: $packages"

    - name: Upload each package to Bookworm
      if: contains(inputs.distributions, 'bookworm') && steps.bookworm_packages.outputs.packages != ''
      run: |
        IFS=',' read -ra PACKAGES <<< "${{ steps.bookworm_packages.outputs.packages }}"
        for package in "${PACKAGES[@]}"; do
          echo "Uploading $package to Bookworm..."
          
          # Use the action for each package
          docker run --rm \
            -v "$(pwd)/apt-repo-upload/bookworm:/workspace" \
            -w /workspace \
            -e INPUT_GITHUB_TOKEN="${{ secrets.PACKAGES_REPO_TOKEN }}" \
            -e INPUT_REPO_SUPPORTED_ARCH=$'amd64\narm64\narmhf' \
            -e INPUT_REPO_SUPPORTED_VERSION="bookworm" \
            -e INPUT_FILE="$package" \
            -e INPUT_FILE_TARGET_VERSION="bookworm" \
            -e INPUT_TARGET_REPOSITORY="opencardev/packages" \
            -e INPUT_PRIVATE_KEY="${{ secrets.APT_SIGNING_KEY }}" \
            -e INPUT_KEY_PASSPHRASE="${{ secrets.APT_SIGNING_PASSPHRASE }}" \
            -e INPUT_PUBLIC_KEY="${{ secrets.APT_SIGNING_PUBLIC_KEY }}" \
            -e GITHUB_REPOSITORY="${{ github.repository }}" \
            maurodruwel/apt-repo-action:v4
        done

    - name: List packages for Trixie
      if: contains(inputs.distributions, 'trixie')
      id: trixie_packages
      run: |
        echo "Finding .deb packages for Trixie..."
        packages=""
        for deb_file in ./apt-repo-upload/trixie/*.deb; do
          if [ -f "$deb_file" ]; then
            if [ -n "$packages" ]; then
              packages="$packages,"
            fi
            packages="$packages$(basename $deb_file)"
          fi
        done
        echo "packages=$packages" >> $GITHUB_OUTPUT
        echo "Trixie packages: $packages"

    - name: Upload each package to Trixie
      if: contains(inputs.distributions, 'trixie') && steps.trixie_packages.outputs.packages != ''
      run: |
        IFS=',' read -ra PACKAGES <<< "${{ steps.trixie_packages.outputs.packages }}"
        for package in "${PACKAGES[@]}"; do
          echo "Uploading $package to Trixie..."
          
          # Use the action for each package
          docker run --rm \
            -v "$(pwd)/apt-repo-upload/trixie:/workspace" \
            -w /workspace \
            -e INPUT_GITHUB_TOKEN="${{ secrets.PACKAGES_REPO_TOKEN }}" \
            -e INPUT_REPO_SUPPORTED_ARCH=$'amd64\narm64\narmhf' \
            -e INPUT_REPO_SUPPORTED_VERSION="trixie" \
            -e INPUT_FILE="$package" \
            -e INPUT_FILE_TARGET_VERSION="trixie" \
            -e INPUT_TARGET_REPOSITORY="opencardev/packages" \
            -e INPUT_PRIVATE_KEY="${{ secrets.APT_SIGNING_KEY }}" \
            -e INPUT_KEY_PASSPHRASE="${{ secrets.APT_SIGNING_PASSPHRASE }}" \
            -e INPUT_PUBLIC_KEY="${{ secrets.APT_SIGNING_PUBLIC_KEY }}" \
            -e GITHUB_REPOSITORY="${{ github.repository }}" \
            maurodruwel/apt-repo-action:v4
        done

    - name: Summary
      run: |
        echo "## APT Repository Upload Complete"
        echo "Build Run ID: ${{ inputs.build_run_id }}"
        echo "Distributions: ${{ inputs.distributions }}"
        echo "Packages uploaded:"
        find ./apt-repo-upload -name "*.deb" -exec basename {} \; | sort