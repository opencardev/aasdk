name: AASDK APT Repository Upload

on:
  workflow_dispatch:
    inputs:
      build_run_id:
        description: 'Build run ID to publish to APT repo'
        required: true
        type: string
      distribution:
        description: 'Distribution to publish to'
      distribution:
        description: 'Distribution to publish to'
        required: false
        default: 'trixie'
        type: choice
        options:
          - trixie
          - bookworm
          - both
        default: 'trixie'
        type: choice
        options:
          - trixie
          - bookworm
          - both

jobs:
  # First job: get the list of .deb files from the build artifacts
  prepare:
  # First job: get the list of .deb files from the build artifacts
  prepare:
    runs-on: ubuntu-latest
    outputs:
      deb_files: ${{ steps.list_files.outputs.deb_files }}
      
    outputs:
      deb_files: ${{ steps.list_files.outputs.deb_files }}
      
    steps:
    - name: Download artifacts from build run
      run: |
        echo "Downloading artifacts from run ID: ${{ inputs.build_run_id }}"
        
        # Download all artifacts from the specified run
        gh run download ${{ inputs.build_run_id }} --repo ${{ github.repository }} --dir ./downloaded-artifacts
        
        echo "Downloaded artifacts structure:"
        find ./downloaded-artifacts -type f -name "*.deb" | head -20
        echo "Downloaded artifacts structure:"
        find ./downloaded-artifacts -type f -name "*.deb" | head -20
        
        # Verify we have packages
        if [ ! "$(find ./downloaded-artifacts -name "*.deb" 2>/dev/null)" ]; then
        if [ ! "$(find ./downloaded-artifacts -name "*.deb" 2>/dev/null)" ]; then
          echo "Error: No .deb packages found in build run ${{ inputs.build_run_id }}"
          exit 1
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: List .deb files for matrix
      id: list_files
    - name: List .deb files for matrix
      id: list_files
      run: |
        echo "Creating matrix of .deb files..."
        echo "Creating matrix of .deb files..."
        
        # Create JSON array of .deb files
        deb_files="["
        first=true
        
        # Clear temp file
        > /tmp/deb_files_part
        
        find ./downloaded-artifacts -name "*.deb" -type f | sort | while read -r deb_file; do
          filename=$(basename "$deb_file")
          if [ "$first" = true ]; then
            echo "\"$filename\"" >> /tmp/deb_files_part
            first=false
          else
            echo ",\"$filename\"" >> /tmp/deb_files_part
          fi
        done
        
        if [ -f /tmp/deb_files_part ] && [ -s /tmp/deb_files_part ]; then
          # Join all lines into a single line and create valid JSON
          deb_files="[$(tr -d '\n' < /tmp/deb_files_part)]"
        else
          deb_files="[]"
        fi
        
        echo "deb_files=$deb_files" >> $GITHUB_OUTPUT
        echo "Found .deb files: $deb_files"

    - name: Upload .deb files as artifact
      uses: actions/upload-artifact@v4
      with:
        name: deb-files-for-apt
        path: ./downloaded-artifacts/**/*.deb
        retention-days: 1

  # Second job: upload each .deb file to APT repo using matrix strategy
  upload-trixie:
    needs: prepare
    if: inputs.distribution == 'trixie' || inputs.distribution == 'both'
    runs-on: ubuntu-latest
      
    steps:
    - name: Download .deb files
      uses: actions/download-artifact@v4
      with:
        name: deb-files-for-apt
        path: ./deb-files

    - name: Upload all .deb files to Trixie sequentially
      run: |
        echo "Processing .deb files for Trixie..."
        
        # Get the list of .deb files
        deb_files='${{ needs.prepare.outputs.deb_files }}'
        echo "Files to process: $deb_files"
        
        # Parse the JSON array and process each file
        echo "$deb_files" | jq -r '.[]' | while read -r deb_file; do
          echo "Processing: $deb_file"
          
          # Find the actual path of the .deb file
          deb_path=$(find ./deb-files -name "$deb_file" -type f | head -1)
          
          if [ -z "$deb_path" ]; then
            echo "Error: Could not find $deb_file"
            exit 1
          fi
          
          echo "Found file at: $deb_path"
          
          # Upload this file using the action
          echo "Uploading $deb_file to Trixie..."
          
          # Use the action for each file
          docker run --rm \
            -e INPUT_GITHUB_TOKEN="${{ secrets.PACKAGES_REPO_TOKEN }}" \
            -e INPUT_REPO_SUPPORTED_ARCH="amd64
        arm64
        armhf" \
            -e INPUT_REPO_SUPPORTED_VERSION="trixie" \
            -e INPUT_FILE="$deb_path" \
            -e INPUT_FILE_TARGET_VERSION="trixie" \
            -e INPUT_TARGET_REPOSITORY="opencardev/packages" \
            -e INPUT_PRIVATE_KEY="${{ secrets.APT_SIGNING_KEY }}" \
            -e INPUT_KEY_PASSPHRASE="${{ secrets.APT_SIGNING_PASSPHRASE }}" \
            -e INPUT_PUBLIC_KEY="${{ secrets.APT_SIGNING_PUBLIC_KEY }}" \
            -v "$(pwd):/github/workspace" \
            -w /github/workspace \
            ghcr.io/maurodruwel/apt-repo-action:v4
            
          echo "Completed upload of $deb_file"
          
          # Add a small delay to avoid potential conflicts
          sleep 10
        done
        
        echo "All files uploaded to Trixie successfully!"

  upload-bookworm:
    needs: prepare
    if: inputs.distribution == 'bookworm' || inputs.distribution == 'both'
    runs-on: ubuntu-latest
      
    steps:
    - name: Download .deb files
      uses: actions/download-artifact@v4
      with:
        name: deb-files-for-apt
        path: ./deb-files

    - name: Upload all .deb files to Bookworm sequentially
      run: |
        echo "Processing .deb files for Bookworm..."
        
        # Get the list of .deb files
        deb_files='${{ needs.prepare.outputs.deb_files }}'
        echo "Files to process: $deb_files"
        
        # Parse the JSON array and process each file
        echo "$deb_files" | jq -r '.[]' | while read -r deb_file; do
          echo "Processing: $deb_file"
          
          # Find the actual path of the .deb file
          deb_path=$(find ./deb-files -name "$deb_file" -type f | head -1)
          
          if [ -z "$deb_path" ]; then
            echo "Error: Could not find $deb_file"
            exit 1
          fi
          
          echo "Found file at: $deb_path"
          
          # Upload this file using the action
          echo "Uploading $deb_file to Bookworm..."
          
          # Use the action for each file
          docker run --rm \
            -e INPUT_GITHUB_TOKEN="${{ secrets.PACKAGES_REPO_TOKEN }}" \
            -e INPUT_REPO_SUPPORTED_ARCH="amd64
        arm64
        armhf" \
            -e INPUT_REPO_SUPPORTED_VERSION="bookworm" \
            -e INPUT_FILE="$deb_path" \
            -e INPUT_FILE_TARGET_VERSION="bookworm" \
            -e INPUT_TARGET_REPOSITORY="opencardev/packages" \
            -e INPUT_PRIVATE_KEY="${{ secrets.APT_SIGNING_KEY }}" \
            -e INPUT_KEY_PASSPHRASE="${{ secrets.APT_SIGNING_PASSPHRASE }}" \
            -e INPUT_PUBLIC_KEY="${{ secrets.APT_SIGNING_PUBLIC_KEY }}" \
            -v "$(pwd):/github/workspace" \
            -w /github/workspace \
            ghcr.io/maurodruwel/apt-repo-action:v4
            
          echo "Completed upload of $deb_file"
          
          # Add a small delay to avoid potential conflicts
          sleep 10
        done
        
        echo "All files uploaded to Bookworm successfully!"

  summary:
    needs: [prepare]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Summary
      run: |
        echo "## APT Repository Upload Complete"
        echo "Build Run ID: ${{ inputs.build_run_id }}"
        echo "Distribution: ${{ inputs.distribution }}"
        echo "Files processed: ${{ needs.prepare.outputs.deb_files }}"
        echo "Distribution: ${{ inputs.distribution }}"
        echo "Files processed: ${{ needs.prepare.outputs.deb_files }}"