name: AASDK Build Multi-Architecture

on:
  push:
    branches:
      - main
      - develop
      - 'feature/*'
      - 'bugfix/*'
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

  pull_request:
    branches:
      - main
      - develop
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

  workflow_dispatch:
    inputs:
      version:
        description: 'Build version (leave empty for auto-generated)'
        required: false
        default: ''
        type: string
      architecture:
        description: 'Architecture to build (all, amd64, arm64, armhf)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - amd64
          - arm64
          - armhf
      create_release:
        description: 'Create GitHub release'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/aasdk

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Generate build matrix
        id: matrix
        run: |
          if [ "${{ github.event.inputs.architecture }}" = "amd64" ]; then
            echo 'matrix={"include":[{"arch":"amd64","platform":"linux/amd64"}]}' >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.architecture }}" = "arm64" ]; then
            echo 'matrix={"include":[{"arch":"arm64","platform":"linux/arm64"}]}' >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.architecture }}" = "armhf" ]; then
            echo 'matrix={"include":[{"arch":"armhf","platform":"linux/arm/v7"}]}' >> $GITHUB_OUTPUT
          else
            echo 'matrix={"include":[{"arch":"amd64","platform":"linux/amd64"},{"arch":"arm64","platform":"linux/arm64"},{"arch":"armhf","platform":"linux/arm/v7"}]}' >> $GITHUB_OUTPUT
          fi

  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}

    name: Build AASDK for ${{ matrix.arch }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up QEMU for cross-platform builds
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all

    - name: Generate build info
      id: build_info
      run: |
        # Use manual version if provided, otherwise auto-generate
        if [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "unknown")
        fi
        
        COMMIT_SHA=$(git rev-parse --short HEAD)
        BUILD_DATE=$(date -u +"%Y%m%d_%H%M%S")
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "commit_sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
        echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
        echo "package_name=aasdk-${{ matrix.arch }}-${VERSION}" >> $GITHUB_OUTPUT

    - name: Build AASDK for ${{ matrix.arch }}
      run: |
        echo "Building AASDK for ${{ matrix.arch }} architecture"
        
        # Create output directory
        mkdir -p ./build-output
        
        # Build using Docker with platform emulation
        docker buildx build \
          --platform ${{ matrix.platform }} \
          --build-arg TARGET_ARCH=${{ matrix.arch }} \
          --build-arg DEBIAN_VERSION=trixie \
          --tag aasdk-build:${{ matrix.arch }} \
          --load \
          .
        
        # Extract built packages from container
        container_id=$(docker create aasdk-build:${{ matrix.arch }})
        docker cp ${container_id}:/output/. ./build-output/
        docker rm ${container_id}
        
        echo "Build completed for ${{ matrix.arch }}"
        ls -la ./build-output/

    - name: Validate packages
      run: |
        echo "Validating packages for ${{ matrix.arch }}..."
        
        if [ ! "$(ls -A ./build-output/*.deb 2>/dev/null)" ]; then
          echo "Error: No .deb packages found for ${{ matrix.arch }}"
          exit 1
        fi
        
        # Display package information
        for package in ./build-output/*.deb; do
          if [ -f "$package" ]; then
            echo "Package: $(basename $package)"
            dpkg-deb --info "$package" | head -20
            echo "---"
          fi
        done

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aasdk-packages-${{ matrix.arch }}-${{ steps.build_info.outputs.build_date }}
        path: |
          ./build-output/*.deb
          ./build-output/*.tar.*
        retention-days: 30

    - name: Upload packages to release (on tag or manual release)
      if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.create_release == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.build_info.outputs.version }}
        name: AASDK Release ${{ steps.build_info.outputs.version }}
        files: |
          ./build-output/*.deb
          ./build-output/*.tar.*
        fail_on_unmatched_files: false
        generate_release_notes: true
        draft: ${{ github.event.inputs.create_release == 'true' && !startsWith(github.ref, 'refs/tags/') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    needs: build
    runs-on: ubuntu-latest
    if: success()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: aasdk-packages-*
        merge-multiple: true
        path: ./test-packages

    - name: Test package installation
      run: |
        echo "Testing package installation..."
        
        # Test AMD64 packages on native Ubuntu
        for package in ./test-packages/*amd64*.deb; do
          if [ -f "$package" ]; then
            echo "Testing installation of $(basename $package)"
            
            # Check package structure
            dpkg-deb --contents "$package" | head -20
            
            # Verify package dependencies
            dpkg-deb --field "$package" Depends
            
            echo "Package $(basename $package) structure looks good"
          fi
        done

    - name: Generate test report
      run: |
        echo "# AASDK Build Test Report" > test-report.md
        echo "" >> test-report.md
        echo "## Build Summary" >> test-report.md
        echo "- Build Date: $(date -u)" >> test-report.md
        echo "- Commit: ${{ github.sha }}" >> test-report.md
        echo "- Branch: ${{ github.ref_name }}" >> test-report.md
        echo "" >> test-report.md
        echo "## Package Information" >> test-report.md
        
        for package in ./test-packages/*.deb; do
          if [ -f "$package" ]; then
            echo "### $(basename $package)" >> test-report.md
            echo '```' >> test-report.md
            dpkg-deb --field "$package" Package Architecture Version Depends >> test-report.md
            echo '```' >> test-report.md
            echo "" >> test-report.md
          fi
        done

    - name: Upload test report
      uses: actions/upload-artifact@v4
      with:
        name: aasdk-test-report-${{ github.run_number }}
        path: test-report.md
        retention-days: 90